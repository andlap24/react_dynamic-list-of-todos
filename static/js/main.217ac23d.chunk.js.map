{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUser","userId","fetch","then","response","json","result","data","TodoList","todos","selectedTodoId","status","query","selectedUser","changeStatus","handleSelect","handleChange","filter","todo","completed","title","includes","className","type","placeholder","onChange","value","map","key","id","classNames","TodoList__item","readOnly","checked","onClick","CurrentUser","state","user","this","props","setState","clearUser","name","email","phone","React","Component","App","selectedUserId","todoId","target","toLowerCase","selectButton","ok","Error","statusText","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.217ac23d.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => (!response.ok\n      ? new Error(`${response.status} - ${response.statusText}`)\n      : response.json().then(result => result.data)));\n}\n\nexport const getUser = userId => fetch(`${BASE_URL}/users/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectedTodoId,\n  status,\n  query,\n  selectedUser,\n  changeStatus,\n  handleSelect,\n  handleChange\n}) => {\n\n  switch (status) {\n    case 'Completed':\n      todos = todos.filter(todo => todo.completed);\n      break;\n    case 'Not completed':\n      todos = todos.filter(todo => !todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  if (query) {\n    todos = todos.filter(todo => todo.title.includes(query));\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        placeholder=\"Search by title\"\n        onChange={handleChange}\n      />\n      <select\n        value={status}\n        onChange={handleSelect}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Completed\">Completed</option>\n        <option value=\"Not completed\">Not completed</option>\n      </select>\n\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                  onClick={() => changeStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={todo.id === selectedTodoId\n                  ? 'TodoList__user-button--selected'\n                  : 'TodoList__user-button'\n                }\n                type=\"button\"\n                onClick={() => selectedUser(todo.userId, todo.id)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  query: PropTypes.string.isRequired,\n  selectedUser: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    const { userId } = this.props;\n\n    await getUser(userId)\n      .then((user) => {\n        if (!user) {\n          return;\n        }\n\n        this.setState({ user });\n      });\n  }\n\n  async componentDidUpdate() {\n    const { userId } = this.props;\n\n    await getUser(userId)\n      .then(user => (\n        !user ? this.setState({ user: {} }) : this.setState({ user })\n      ));\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${userId}`}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n    status: 'All',\n    query: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title && todo.userId && todo.id),\n    });\n  }\n\n  selectedUser = (userId, todoId) => {\n    this.setState({\n      selectedUserId: userId,\n      selectedTodoId: todoId,\n    });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  handleSelect = ({ target }) => {\n    this.setState({ status: target.value });\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ query: target.value.toLowerCase() });\n  }\n  \n\n  selectButton = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId, status, query } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedTodoId={selectedTodoId}\n            status={status}\n            query={query}\n            selectedUser={this.selectedUser}\n            changeStatus={this.changeStatus}\n            handleSelect={this.handleSelect}\n            handleChange={this.handleChange}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}